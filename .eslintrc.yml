---
root: true
parser: "@typescript-eslint/parser"
env:
  node: true
  jest: true
globals:
  BufferEncoding: false
  NodeJS: false
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
- "@typescript-eslint"
extends:
- eslint:recommended
- plugin:node/recommended
- plugin:@typescript-eslint/recommended
- prettier
ignorePatterns:
- '**/buildSrc/**'
rules:
  array-callback-return: "error"
  arrow-body-style: ["error", "as-needed"]
  camelcase: "off"
  class-methods-use-this: "off"
  consistent-return: "error"
  default-case: "error"
  default-param-last: "error"
  dot-notation: ["error", { allowKeywords: true }]
  eqeqeq: "error"
  func-style: ["off", "expression"]
  guard-for-in: "error"
  max-statements-per-line: "error"
  new-cap: "error"
  no-alert: "error"
  no-array-constructor: "error"
  no-caller: "error"
  no-console: "off"
  no-delete-var: "error"
  no-else-return: ["error", { allowElseIf: false }]
  no-eval: "error"
  no-extend-native: "error"
  no-extra-bind: "error"
  no-fallthrough: "error"
  no-global-assign: "error"
  no-implied-eval: "error"
  no-invalid-this: "error"
  no-iterator: "error"
  no-label-var: "error"
  no-labels: "error"
  no-lone-blocks: "error"
  no-loop-func: "error"
  no-multi-str: "error"
  no-nested-ternary: "error"
  no-new: "error"
  no-new-func: "error"
  no-new-object: "error"
  no-new-wrappers: "error"
  no-octal: "error"
  no-octal-escape: "error"
  no-param-reassign: "error"
  no-proto: "error"
  no-process-exit: "off"
  no-redeclare: "error"
  no-restricted-properties: [
      "error",
      { property: "substring", message: "Use .slice instead of .substring." },
      { property: "substr", message: "Use .slice instead of .substr." },
      { object: "assert", property: "equal", message: "Use assert.strictEqual instead of assert.equal." },
      { object: "assert", property: "notEqual", message: "Use assert.notStrictEqual instead of assert.notEqual." },
      { object: "assert", property: "deepEqual", message: "Use assert.deepStrictEqual instead of assert.deepEqual." },
      { object: "assert", property: "notDeepEqual", message: "Use assert.notDeepStrictEqual instead of assert.notDeepEqual." }
  ]
  no-return-assign: "error"
  no-script-url: "error"
  no-self-assign: "error"
  no-self-compare: "error"
  no-sequences: "error"
  no-shadow: "off"
  no-throw-literal: "error"
  no-undef: ["error", {typeof: true}]
  node/no-unsupported-features/es-syntax: "off"
  node/no-unsupported-features/node-builtins: "off"
  node/no-unpublished-import: "off"
  no-undef-init: "error"
  no-undefined: "off"
  no-underscore-dangle: ["error", {allowAfterThis: true}]
  no-unmodified-loop-condition: "error"
  no-unneeded-ternary: "error"
  no-unused-expressions: "error"
  no-unused-vars: ["off", {vars: "all", args: "after-used", caughtErrors: "all"}]
  no-use-before-define: "off"
  no-useless-call: "error"
  no-useless-computed-key: "error"
  no-useless-concat: "error"
  no-useless-constructor: "off"
  no-useless-escape: "error"
  no-useless-rename: "error"
  no-useless-return: "error"
  no-var: "error"
  node/callback-return: ["error", ["cb", "callback", "next"]]
  node/handle-callback-err: ["error", "err"]
  node/no-deprecated-api: "error"
  node/no-mixed-requires: "error"
  node/no-missing-import: "off"
  node/no-new-require: "error"
  node/no-path-concat: "error"
  node/no-process-exit: "error"
  object-shorthand: "error"
  operator-assignment: "error"
  prefer-arrow-callback: "error"
  prefer-const: "error"
  prefer-numeric-literals: "error"
  prefer-promise-reject-errors: "error"
  prefer-regex-literals: "error"
  prefer-rest-params: "error"
  prefer-spread: "error"
  prefer-template: "error"
  radix: "error"
  require-unicode-regexp: "error"
  spaced-comment: ["error", "always", { exceptions: ["-"]}]
  strict: ["error", "global"]
  symbol-description: "error"
  yoda: ["error", "never", { exceptRange: true }]
